{"version":3,"sources":["fonts/GloriaHallelujah-Regular.ttf","components/Header.js","components/Footer.js","components/Plots.js","components/ExtremeValuesTable.js","components/TopContent.js","services/data.js","services/info.js","App.js","index.js"],"names":["module","exports","Header","className","Footer","href","Plots","data","dtgs","map","d","dtg","temperatures","Number","temperature","humidities","humidity","temp_data","x","y","name","type","hum_data","maxTemp","Math","max","minTemp","min","maxHumi","temperatureLayout","autosize","width","height","paper_bgcolor","plot_bgcolor","title","text","font","family","size","color","xref","yaxis","range","humidityLayout","config","useresizehandler","layout","ExtremeValuesTable","slice","minHumi","id","TopContent","total_measurements","first_day","last_day","axios","get","then","response","App","useState","allData","setAllData","displayData","setDisplayData","first_day_of_measurements","last_day_of_measurements","info","setInfo","useEffect","dataService","initialData","infoService","retrievedInfo","handlePlotButton","nbrDays","nbrtoShow","onClick","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8cccc737.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/GloriaHallelujah-Regular.779caa76.ttf\";","import React from 'react'\n\nconst Header = () => {\n    return (\n        <div className='header'>\n\n        </div>\n    )\n}\n\nexport default Header","import React from 'react'\n\nconst Footer = () => {\n\n    return (\n        <div className='footer'>\n            <ul>\n                <li>App made by: Erik Liljeroth</li>\n                <li> LinkedIn: <a href=\"https://www.linkedin.com/in/erikliljeroth/\">Erik Liljeroth</a></li>\n            </ul>\n        </div>)\n}\n\nexport default Footer","import React from 'react'\nimport Plot from 'react-plotly.js'\n\nconst Plots = ({ data, className }) => {\n\n    const dtgs = data.map(d => d.dtg)\n    const temperatures = data.map(d => Number(d.temperature))\n    const humidities = data.map(d => Number(d.humidity))\n\n    const temp_data = [{ x: dtgs, y: temperatures, name: 'temperature', type: 'scatter' }]\n    const hum_data = [{ x: dtgs, y: humidities, name: 'humidity', type: 'scatter' }]\n\n    const maxTemp = Math.max(...temperatures)\n    const minTemp = Math.min(...temperatures)\n    const maxHumi = Math.max(...humidities)\n    const minHumi = Math.min(...humidities)\n\n    const temperatureLayout = {\n        autosize: false,\n        width: 500,\n        height: 500,\n        paper_bgcolor: 'rgba(0,0,0,0)',\n        plot_bgcolor: 'rgba(0,0,0,0)',\n        title: {\n            text: 'Temperature [&deg;C]',\n            font: {\n                family: 'Courier New, monospace',\n                size: 20,\n                color: '#000'\n            },\n            xref: 'paper',\n            x: 0.05\n        },\n        yaxis: { range: [minTemp - 5, maxTemp + 5] }\n    }\n\n    const humidityLayout = {\n        autosize: false,\n        width: 500,\n        height: 500,\n        paper_bgcolor: 'rgba(0,0,0,0)',\n        plot_bgcolor: 'rgba(0,0,0,0)',\n        title: {\n            text: 'Relative Humidity [%]',\n            font: {\n                family: 'Courier New, monospace',\n                size: 20,\n                color: '#000'\n            },\n            xref: 'paper',\n            x: 0.05\n        },\n        yaxis: { range: [minHumi - 15, maxHumi + 15] }\n    }\n    \n    const config = { useresizehandler: true }\n\n    return (\n        <div className={className}>\n            <Plot\n                data={temp_data}\n                layout={temperatureLayout}\n                config={config}\n            />\n\n            <Plot\n                data={hum_data}\n                layout={humidityLayout}\n                config={config}\n            />\n        </div>\n\n    )\n}\n\nexport default Plots\n","import React from 'react'\n\nconst ExtremeValuesTable = ({ data }) => {\n\n    let temperatures = data.map(d => Number(d.temperature))\n    temperatures = temperatures.slice(-48*7)\n    let humidities = data.map(d => Number(d.humidity))\n    humidities = humidities.slice(-48*7)\n    const maxTemp = Math.max(...temperatures)\n    const minTemp = Math.min(...temperatures)\n    const maxHumi = Math.max(...humidities)\n    const minHumi = Math.min(...humidities)\n\n    return (\n        <table >\n            <thead >\n                <tr className=\"table_header\">\n                    <th id={'borderboth'}> Quantity [unit] </th>\n                    <th id={'borderboth'}> Min </th>\n                    <th id={'borderbottom'}> Max </th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr>\n                    <td id={'borderboth'}> Temperature [&deg;C] </td>\n                    <td id={'borderboth'}>  {minTemp}          </td>\n                    <td id={'borderbottom'}  >  {maxTemp}                           </td>\n                </tr>\n                <tr>\n                    <td id={'borderright'}> Relative Humidity [%]   </td>\n                    <td id={'borderright'}> {minHumi}           </td>\n                    <td >  {maxHumi}                             </td>\n                </tr>\n            </tbody>\n        </table>\n    )\n}\n\nexport default ExtremeValuesTable","import React from 'react'\n\nconst TopContent = ({ total_measurements, first_day, last_day }) => {\n\n    return (\n        <div className='topContent'>\n            <div className='infoBox'>\n                <h2 className='infoBoxHeader'>\n                    About\n                </h2>\n                <p className='infoBoxContent'>\n                    The greenhouse is placed on Erik's balcony on the fourth floor.\n                    This website runs on a Raspberry Pi inside the greenhouse.\n                </p>\n            </div>\n\n            <h1 className='mainTtile'>Erik's Greenhouse</h1>\n\n            <div className='dataBox'>\n                <h2 className='dataBoxHeader'>\n                    Summary stats\n                </h2>\n                <ul className='dataBoxContent'>\n                    <li>Total measurements: {total_measurements}</li>\n                    <li>Measuring init: {first_day}</li>\n                    <li>Current day: {last_day}</li>\n                </ul>\n            </div>\n        </div>\n    )\n}\n\nexport default TopContent","import axios from 'axios'\nconst baseUrl = '/api/data'\n\nconst getData = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nexport default { getData }","import axios from 'axios'\nconst baseUrl = '/info'\n\nconst getInfo = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nexport default { getInfo }","import React, { useState, useEffect } from 'react'\n\n// Components\nimport Header from './components/Header.js'\nimport Footer from './components/Footer.js'\nimport Plots from './components/Plots.js'\nimport ExtremeValuesTable from './components/ExtremeValuesTable'\nimport TopContent from './components/TopContent'\n\n// Fonts\nimport './fonts/GloriaHallelujah-Regular.ttf'\n\n// Styles\nimport './styles/main.css'\nimport './styles/tableStyle.css'\nimport './styles/footerHeaderStyle.css'\nimport './styles/buttonStyle.css'\nimport './styles/plotStyle.css'\nimport './styles/topContentStyle.css'\n\n// Services\nimport dataService from './services/data.js'\nimport infoService from './services/info.js'\n\n\nconst App = () => {\n\n    // allData contains all data fetched from DB\n    const [allData, setAllData] = useState([])\n    // displayData contains the data to be displayed in plots, initialized as allData\n    const [displayData, setDisplayData] = useState([])\n    // info contains general information about the measurements on the website\n    const beforeLoadInfo = {total_measurements: '-', first_day_of_measurements: '-', last_day_of_measurements: '-'}\n    const [info, setInfo] = useState([beforeLoadInfo])\n\n    // Initialize data states\n    useEffect(() => {\n        dataService\n            .getData()\n            .then(initialData => {\n                setAllData(initialData)\n                setDisplayData(initialData)\n            })\n        infoService\n            .getInfo()\n            .then(retrievedInfo => {\n                setInfo(retrievedInfo)\n            })\n    }, [])\n\n    // For bug-checking the info-boxes\n    /* \n    const fetchInfo = () => {\n        const info = {}\n        info.total_measurements = 5000\n        info.first_day_of_measurements = '2020-03-31'\n        info.last_day_of_measurements = '2020-04-05'\n        return info\n    }\n    */\n\n    const handlePlotButton = (nbrDays) => {\n        const nbrtoShow = -nbrDays * 48 // 48 measurements per day\n        setDisplayData(allData.slice(nbrtoShow)) // NOTE asynch function\n    }\n\n\n    return (\n        <div className='wrapper'>\n            <Header />\n\n            <TopContent total_measurements={info[0].total_measurements} first_day={info[0].first_day_of_measurements} last_day={info[0].last_day_of_measurements} />\n\n            <h2>Temperature and Relative Humidity</h2>\n\n            <div className='plotbuttons'>\n                <button onClick={() => handlePlotButton(1)}  >1 day</button>\n                <button onClick={() => handlePlotButton(2)}  > 2 days</button >\n                <button onClick={() => handlePlotButton(7)}  >7 days</button>\n                <button onClick={() => handlePlotButton(30)} >30 days</button>\n            </div>\n\n            <Plots data={displayData} className={'plots'} />\n\n            <h2>Extremevalues past 7 days</h2>\n\n            <ExtremeValuesTable data={allData} />\n\n            <Footer />\n        </div >\n    )\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App.js'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}